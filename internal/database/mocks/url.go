// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/vit6556/ozon-internship-assignment/internal/entity"

	mock "github.com/stretchr/testify/mock"
)

// MockUrlRepository is an autogenerated mock type for the UrlRepository type
type MockUrlRepository struct {
	mock.Mock
}

// AddAlias provides a mock function with given fields: ctx, sourceUrl, alias
func (_m *MockUrlRepository) AddAlias(ctx context.Context, sourceUrl string, alias string) (*entity.Url, error) {
	ret := _m.Called(ctx, sourceUrl, alias)

	if len(ret) == 0 {
		panic("no return value specified for AddAlias")
	}

	var r0 *entity.Url
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*entity.Url, error)); ok {
		return rf(ctx, sourceUrl, alias)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *entity.Url); ok {
		r0 = rf(ctx, sourceUrl, alias)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Url)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, sourceUrl, alias)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUrl provides a mock function with given fields: ctx, alias
func (_m *MockUrlRepository) GetUrl(ctx context.Context, alias string) (*entity.Url, error) {
	ret := _m.Called(ctx, alias)

	if len(ret) == 0 {
		panic("no return value specified for GetUrl")
	}

	var r0 *entity.Url
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.Url, error)); ok {
		return rf(ctx, alias)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.Url); ok {
		r0 = rf(ctx, alias)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Url)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, alias)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockUrlRepository creates a new instance of MockUrlRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUrlRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUrlRepository {
	mock := &MockUrlRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
